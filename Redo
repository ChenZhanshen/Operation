withsnap_hist as--select the latest snapshot ID(  select max(snap_id)  as snap_id   from dba_hist_system_event   --displays historical information on total waits for an event. ),
lfs as--count the difference in (CPU waits && time waited) for 'log file sync' in latest two snapshots (  select e.snap_id,         e.total_waits - lag(e.total_waits) over (partition by e.event_name order by e.snap_id) waits_delta,   --lag(e.total_waits):move down rows in total_waits as offset 1, then the first blanked block defaults as null          e.time_waited_micro - lag(e.time_waited_micro) OVER (PARTITION BY e.event_name ORDER BY e.snap_id) time_delta from dba_hist_system_event e  where e.event_name = 'log file sync'  and snap_id >= (select max(snap_id) -1 from snap_hist)),
lfpw as--count the difference in (CPU waits && time waited) for 'log file parallel write' in latest two snapshots (  select e.snap_id,         e.total_waits - lag(e.total_waits) over (partition by e.event_name order by e.snap_id) waits_delta,         e.time_waited_micro - lag(e.time_waited_micro) OVER (PARTITION BY e.event_name ORDER BY e.snap_id) time_delta  from dba_hist_system_event e  where e.event_name = 'log file parallel write'  and snap_id >= (select max(snap_id)-1 from snap_hist)),
redo as--count the difference in redo size value in GB for latest two snapshots (  SELECT  snap_id,(VALUE - lag(VALUE) OVER (PARTITION BY stat_name ORDER BY snap_id))/1024/1024 redo_size  FROM dba_hist_sysstat   --displays historical system statistics information, including OLAP kernel statistics.   WHERE stat_name = 'redo size'  and snap_id >= (select max(snap_id)-1 from snap_hist)  ),
snap as--select Time of the (beginning && end && time interval) of the snapshot for the latest snapshot(  select  snap_id,         begin_interval_time,   end_interval_time,         end_interval_time - begin_interval_time interval_duration  from dba_hist_snapshot   --displays information about the snapshots in the Workload Repository.  where snap_id = (select max(snap_id) from snap_hist)),
sn as--select interval duration in seconds from snap(  select  snap_id,         begin_interval_time,         end_interval_time,          interval_duration,         extract(hour from interval_duration)*3600+         extract(minute from interval_duration)*60+         extract(second from interval_duration) seconds_in_snap  from snap  where snap_id = (select max(snap_id) from snap_hist)),
switches as --count redo log switches time within one hour(select  count(RECID)  as redo_switches   --one record id = one switch of redo logfrom    v$log_history   --displays log history information from the control file   where first_time >= sysdate - 1 /24   --lowest SCN within 1 hour),
ash as--select latest 'log file sync' event with max active sessions group by sample time(  select snap_id, max(active_sess) max_concurrency  from  (   --select latest active sessions number for all 'log file sync' events     select snap_id, sample_time, count(*) active_sess    from dba_hist_active_sess_history ash    --displays active session history of recent system activity    where event = 'log file sync'    and snap_id = (select max(snap_id) from snap_hist)    group by snap_id, sample_time  )  group by snap_id),
requests as(  select snap_id, avg(p3) avg_lfpw_requests  from dba_hist_active_sess_history ash  where event = 'log file parallel write'  and snap_id = (select max(snap_id) from snap_hist)  group by snap_id), 
t as (select sn.snap_id,sn.begin_interval_time,sn.interval_duration,sn.end_interval_time,       round(redo.redo_size/seconds_in_snap,2) redo_gen_MB_per_sec,       round(100*lfpw.time_delta/1e6/seconds_in_snap) lgwr_pct_busy,   --    round(avg_lfpw_requests, 2) avg_requests_per_log_write,       round(1e6*redo.redo_size/lfpw.time_delta, 2) redo_write_speed,     --  round(redo.redo_size/lfpw.waits_delta, 2) avg_redo_write_size,              redo_switchesfrom lfs,     lfpw,     sn,     redo,       switcheswhere lfs.snap_id (+) = sn.snap_idand lfpw.snap_id (+) = sn.snap_idand redo.snap_id (+) = sn.snap_id--and ash.snap_id = sn.snap_id)
SELECT /*+ RESULT_CACHE */   property, valueFROM    TUNPIVOTEXCLUDE NULLS(   VALUE   FOR      PROPERTY   IN   (      redo_gen_MB_per_sec,            lgwr_pct_busy,            redo_write_speed,      redo_switches   ))
